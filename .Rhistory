#Input the data and store it under wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
#Saving the input data file into my Project Directory
fna.data <-  "WisconsinCancer.csv"
#Input the data and store it under wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
View(wisc.df)
#Saving the input data file into my Project Directory
fna.data <-  "WisconsinCancer.csv"
#Input the data and store it under wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
#Inspect data
View(wisc.df)
head(wisc.df)
#Saving the input data file into my Project Directory
fna.data <-  "WisconsinCancer.csv"
#Input the data and store it under wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
#Inspect data
View(wisc.df)
head(wisc.df)
wisc.df
#Create vector w/ diagnoses
diagnosis <- wisc.df$diagnosis
diagnosis
attributes(wisc.data)
#Create new data frame that omits diagnosis column
wisc.data <- wisc.df[,-1]
attributes(wisc.data)
str(wisc.data)
str(wisc.data)
str(diagnosis)
diagnosis[names(diagnosis) == "M"]
table(diagnosis)
str(wisc.data)
grep(pattern= "_mean$", x=wisc.data)
grep(pattern= "_mean", x=wisc.data)
grep(pattern= "_mean", x=wisc.df)
grep(pattern= "mean", x=wisc.df)
grepl(pattern= "mean", x=wisc.df)
grepl(pattern= "mean$", x=wisc.df)
grepl(pattern= "mean$", x=t(wisc.df)
grepl(pattern= "mean$", x=t(wisc.df))
grepl(pattern= "mean$", x=(wisc.df))
unlist(wisc.df)
look_for(wisc.data, "mean$")
lookfor(wisc.data, "mean$")
names(wisc.data)[grep("mean", names(wisc.data))]
#Not quite sure how to reason this out but google helped
meanvect <- names(wisc.data)[grep("mean", names(wisc.data))]
length(meanvect)
#Not quite sure how to reason this out but google helped
meanvect <- names(wisc.data)[grep("_mean", names(wisc.data))]
length(meanvect)
str(wisc.data)
dim(wisc.data)
str(wisc.data)
#Check column means and st dev
colMeans(wisc.data)
apply(wisc.data, 2, sd)
#Perform PCA on wisc.data, use t() for transpose of the data
wisc.pr <- prcomp(t(wisc.data))
#Perform PCA on wisc.data, use t() for transpose of the data
wisc.pr <- prcomp(wisc.data))
#Perform PCA on wisc.data, use t() for transpose of the data
wisc.pr <- prcomp(wisc.data)
#Summary of the PCA results
summary(wisc.pr)
#Perform PCA on wisc.data, use t() for transpose of the data
wisc.pr <- prcomp(wisc.data)
#Summary of the PCA results
summary(wisc.pr)
#Perform PCA on wisc.data, use t() for transpose of the data
wisc.pr <- prcomp(wisc.data)
#Summary of the PCA results
summary(wisc.pr)
#Perform PCA on wisc.data, use t() for transpose of the data
wisc.pr <- prcomp(t(wisc.data))
#Summary of the PCA results
summary(wisc.pr)
#Check column means and st dev
colMeans(wisc.data)
#Check column means and st dev
colMeans(wisc.data)
apply(wisc.data, 2, sd)
#Perform PCA on wisc.data, use t() for transpose of the data, use scaling
wisc.pr <- prcomp(t(wisc.data), scale=TRUE)
#Summary of the PCA results
summary(wisc.pr)
#Perform PCA on wisc.data, use t() for transpose of the data, use scaling
wisc.pr <- prcomp(t(wisc.data), scale=TRUE)
#Summary of the PCA results
summary(wisc.pr)
barplot(wisc.pr)
plot(wisc.pr)
plot(wisc.pr, main= "QUick scree plot")
plot(wisc.pr, main= "Quick scree plot")
#Biplot
biplot(wisc.pr)
#Scatterplot w/ PC1 & PC2
plot(wisc.pr, col= diagnosis, xlab= "PC1", ylab= "PC2")
#Scatterplot w/ PC1 & PC2
plot(wisc.pr, col = diagnosis, xlab = "PC1", ylab = "PC2")
wisc.pr$x
#Scatterplot w/ PC1 & PC2
plot(wisc.pr$x[,1], wisc.pr$x[,2] col = diagnosis, xlab = "PC1", ylab = "PC2")
#Scatterplot w/ PC1 & PC2
plot(wisc.pr$x[,1], wisc.pr$x[,2], col = diagnosis, xlab = "PC1", ylab = "PC2")
#Scatterplot w/ PC1 & PC2
plot(wisc.pr$x[,1], wisc.pr$x[,2], xlab = "PC1", ylab = "PC2", col=diagnosis)
#Scatterplot w/ PC1 & PC2
plot(wisc.pr$x[,1], wisc.pr$x[,2], xlab = "PC1", ylab = "PC2", col=diagnosis)
#Scatterplot w/ PC1 & PC2
plot(wisc.pr$x[,1], wisc.pr$x[,2], xlab = "PC1", ylab = "PC2")
text(wisc.pr$x[,1], wisc.pr$x[,2], col=diagnosis)
#Scatterplot w/ PC1 & PC2
plot(wisc.pr$x[,1], wisc.pr$x[,2], col=diagnosis, xlab = "PC1", ylab = "PC2")
#Scatterplot w/ PC1 & PC2
plot(wisc.pr$x[,1], wisc.pr$x[,2], col = diagnosis, xlab = "PC1", ylab = "PC2")
library(ggplot2)
#Scatterplot w/ PC1 & PC2
plot(wisc.pr$x[,1], wisc.pr$x[,2], col = diagnosis, xlab = "PC1", ylab = "PC2")
#Create vector w/ diagnoses
diagnosis <- factor(wisc.df$diagnosis)
diagnosis
#Scatterplot w/ PC1 & PC2
plot(wisc.pr$x[,1], wisc.pr$x[,2], col = diagnosis, xlab = "PC1", ylab = "PC2")
#Summary of the PCA results
summary(wisc.pr)
install.packages("ade4")
library(ade4)
dudi.pca(wisc.data)
#Saving the input data file into my Project Directory
fna.data <-  "WisconsinCancer.csv"
#Input the data and store it under wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
#Inspect data
View(wisc.df)
head(wisc.df)
wisc.df
#Create new data frame that omits diagnosis column
wisc.data <- wisc.df[,-1]
#Create vector w/ diagnoses
diagnosis <- factor(wisc.df$diagnosis)
diagnosis
str(wisc.data)
table(diagnosis)
#Not quite sure how to reason this out but google helped
meanvect <- names(wisc.data)[grep("_mean", names(wisc.data))]
length(meanvect)
#Check column means and st dev
colMeans(wisc.data)
apply(wisc.data, 2, sd)
#Perform PCA on wisc.data, use t() for transpose of the data, use scaling
wisc.pr <- prcomp(t(wisc.data), scale=TRUE)
#Summary of the PCA results
summary(wisc.pr)
#Scree plot
plot(wisc.pr, main= "Quick scree plot")
#Biplot
biplot(wisc.pr)
wisc.pr$x
library(ade4)
dudi.pca(wisc.data, center = TRUE, scale= TRUE, scannf= TRUE)
#Scree plot
library(ade4)
dudipca <- dudi.pca(wisc.data, center = TRUE, scale= TRUE, scannf= TRUE)
#Saving the input data file into my Project Directory
fna.data <-  "WisconsinCancer.csv"
#Input the data and store it under wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
#Inspect data
View(wisc.df)
head(wisc.df)
wisc.df
#Create new data frame that omits diagnosis column
wisc.data <- wisc.df[,-1]
#Create vector w/ diagnoses
diagnosis <- factor(wisc.df$diagnosis)
diagnosis
str(wisc.data)
table(diagnosis)
#Not quite sure how to reason this out but google helped
meanvect <- names(wisc.data)[grep("_mean", names(wisc.data))]
length(meanvect)
#Check column means and st dev
colMeans(wisc.data)
apply(wisc.data, 2, sd)
#Perform PCA on wisc.data, use t() for transpose of the data, use scaling
wisc.pr <- prcomp(t(wisc.data), scale=TRUE)
#Summary of the PCA results
summary(wisc.pr)
#Scree plot
plot(wisc.pr, main= "Quick scree plot")
#Biplot
biplot(wisc.pr)
wisc.pr$x
#Scatterplot w/ PC1 & PC2
plot(wisc.pr$x[,1], wisc.pr$x[,2], col = diagnosis, xlab = "PC1", ylab = "PC2")
#Scree plot
library(ade4)
dudipca <- dudi.pca(wisc.data, center = TRUE, scale= TRUE, scannf= TRUE)
#Saving the input data file into my Project Directory
fna.data <-  "WisconsinCancer.csv"
#Input the data and store it under wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
#Inspect data
View(wisc.df)
head(wisc.df)
wisc.df
#Create new data frame that omits diagnosis column
wisc.data <- wisc.df[,-1]
#Create vector w/ diagnoses
diagnosis <- factor(wisc.df$diagnosis)
diagnosis
str(wisc.data)
table(diagnosis)
#Not quite sure how to reason this out but google helped
meanvect <- names(wisc.data)[grep("_mean", names(wisc.data))]
length(meanvect)
#Check column means and st dev
colMeans(wisc.data)
apply(wisc.data, 2, sd)
#Perform PCA on wisc.data, use t() for transpose of the data, use scaling
wisc.pr <- prcomp(t(wisc.data), scale=TRUE)
#Summary of the PCA results
summary(wisc.pr)
#Scree plot
plot(wisc.pr, main= "Quick scree plot")
#Biplot
biplot(wisc.pr)
wisc.pr$x
#Scatterplot w/ PC1 & PC2
plot(wisc.pr$x[,1], wisc.pr$x[,2], col = diagnosis, xlab = "PC1", ylab = "PC2")
#Scree plot
library(ade4)
dudipca <- dudi.pca(wisc.data, center = TRUE, scale= TRUE, scannf= TRUE)
#Scree plot
library(ade4)
dudipca <- dudi.pca(df = wisc.data, center = TRUE, scale = TRUE, scannf = FALSE, nf = 30)
#Scree plot
library(ade4)
dudipca <- dudi.pca(df = wisc.data, center = TRUE, scale = TRUE, scannf = FALSE, nf = 30)
#Scree plot
library(ade4)
dudipca <- dudi.pca(df = wisc.data, center = TRUE, scale = TRUE, scannf = FALSE, nf = 30)
dudiepca
#Scree plot
library(ade4)
dudipca <- dudi.pca(df = wisc.data, center = TRUE, scale = TRUE, scannf = FALSE, nf = 30)
dudipca
plot(dudipca$x[,1], dudipca$x[,2], col = diagnosis, xlab = "PC1", ylab = "PC2")
load.packages("factoextra")
install.packages("factoextra")
library(factoextra)
#Scree plot
fviz_eig(dudipca)
library(factoextra)
get_pca(dudipca)
dudipca$contrib
$contrib
library(ggplot2)
fviz_pca(dudipca)
fviz_cos2(dudipca)
#Scree plot
fviz_eig(dudipca, addlabels=TRUE)
plot(dudipca[,1], dudipca[,2], col = diagnosis, xlab = "PC1", ylab = "PC2")
get.eig(dudipca)
get_eig(dudipca)
var <- get_pca_var(dudipca)
var <- get_pca_var(dudipca)
var
fviz_pca_var(dudipca, col.var = diagnosis)
fviz_pca_var(dudipca, col.var = diagnosis, gradient.cols = c("#00AFBB", "#E7B800"))
fviz_pca_var(dudipca, color = diagnosis)
fviz_pca_var(dudipca, col = diagnosis)
ggplot(dudipca, aes(Dim1, Dim2, col= diagnosis))
fviz_pca(dudipca)
fviz_pca_var(dudipca, col.var="diagnosis",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
fviz_pca_var(dudipca, col.var="contrib",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping
)
fviz_pca_ind(dudipca, col.ind = "cos2",
gradient.cols = c("#00AFBB", "#E7B800", "#FC4E07"),
repel = TRUE # Avoid text overlapping (slow if many points)
)
fviz_pca_ind(dudipca,
label = "none", # hide individual labels
habillage = wisc.df$diagnosis, # color by groups
palette = c("#00AFBB", "#E7B800"),
addEllipses = TRUE # Concentration ellipses
)
# Repeat for components 1 and 3
plot(wisc.pr$x[,1], wisc.pr$x[,3], col = diagnosis,
xlab = "PC1", ylab = "PC3")
#Saving the input data file into my Project Directory
fna.data <-  "WisconsinCancer.csv"
#Input the data and store it under wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
#Inspect data
View(wisc.df)
head(wisc.df)
wisc.df
#Create new data frame that omits diagnosis column
wisc.data <- wisc.df[,-1]
#Create vector w/ diagnoses
diagnosis <- factor(wisc.df$diagnosis)
diagnosis
str(wisc.data)
table(diagnosis)
#Not quite sure how to reason this out but google helped
meanvect <- names(wisc.data)[grep("_mean", names(wisc.data))]
length(meanvect)
#Check column means and st dev
colMeans(wisc.data)
apply(wisc.data, 2, sd)
#Perform PCA on wisc.data, use t() for transpose of the data, use scaling
wisc.pr <- prcomp(wisc.data, scale=TRUE)
#Summary of the PCA results
summary(wisc.pr)
#Scree plot
plot(wisc.pr, main= "Quick scree plot")
#Biplot
biplot(wisc.pr)
#Scatterplot w/ PC1 & PC2
plot(wisc.pr$x[,1], wisc.pr$x[,2], col = diagnosis, xlab = "PC1", ylab = "PC2")
# Repeat for components 1 and 3
plot(wisc.pr$x[,1], wisc.pr$x[,3], col = diagnosis,
xlab = "PC1", ylab = "PC3")
library(ggplot2)
df <- as.data.fram(wisc.pr$x)
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis
#Scatter plot colored by dx
ggplot(df) + aes(PC1, PC2, col=diagnosis) + geom_point()
pr.var <-  wisc.pr$sdev^2
pr.var <-  wisc.pr$sdev^2
head(pr.var)
#Variance explained by e/ PC
pve <-  pr.var/sum(pr.var)
# Plot variance explained for each principal component
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "o")
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
wisc.pr$rotation[,1]
#Scale the data
data.scaled <- scale(wisc.data)
#Calc Euclidean dists b/w pairs of observations
data.dist <-  dist(data.scaled)
wisc.hclust <- hclust(data.dist, method = "complete")
plot(wisc.hclust)
plot(wisc.hclust)
abline(h=18, col= "red", lty=2)
#Cut the tree
wisc.hclust.clusters <- cutree(wisc.hclust, k=4)
#COmpare our clusters to actual diagnoses
table(wisc.hclust.clusters, diagnosis)
wisc.hclust.clusters <- cutree(wisc.hclust, k=3)
table(wisc.hclust.clusters, diagnosis)
wisc.hclust.clusters <- cutree(wisc.hclust, k=2)
table(wisc.hclust.clusters, diagnosis)
wisc.hclust.clusters <- cutree(wisc.hclust, k=5)
table(wisc.hclust.clusters, diagnosis)
wisc.hclust.clusters <- cutree(wisc.hclust, k=6)
table(wisc.hclust.clusters, diagnosis)
wisc.hclust.clusters <- cutree(wisc.hclust, k=10)
table(wisc.hclust.clusters, diagnosis)
#Create plots using, single, complete, average, and ward.D2
plot(hclust(data.dist, method = "single"))
plot(hclust(data.dist, method = "complete"))
plot(hclust(data.dist, method = "average"))
plot(hclust(data.dist, method = "ward.D2"))
wisc.km <-  kmeans(wisc.data, centers=2, nstart = 20)
table(wisc.km$cluster, diagnosis)
table(wisc.km$cluster, wisc.hclust.clusters)
table(wisc.km$cluster,cutree(wisc.hclust, k=4))
wisc.pr.hclust <-  hclust(wisc.data, method= "ward.D2")
wisc.pr.hclust <- (hclust(data.dist, method = "ward.D2"))
plot(wisc.pr.hclust)
grps <- cutree(wisc.pr.hclust, k=2)
table(grps)
table(grps, diagnosis)
plot(wisc.pr$x[,1:2], col=grps)
plot(wisc.pr$x[,1:2], col=diagnosis)
g <- as.factor(grps)
levels(g)
g <- relevel(g,2)
levels(g)
#plot w/ reordered factor
plot(wisc.pr$x[,1:2], col=g)
#clustering w/ 1st 7 PCs
wisc.pr.hclust <- hclust(wisc.pr$x[, 1:7], method="ward.D2")
#clustering w/ 1st 7 PCs
wisc.pr.hclust <- hclust(wisc.pr$x[,1:7], method="ward.D2")
#clustering w/ 1st 7 PCs
wisc.pr.hclust.clusters <- cutree(wisc.pr.hclust, k=2)
table(wisc.pr.hclust.clusters, diagnosis)
table(diagnosis)
table(wisc.hclust.clusters, diagnosis)
table(cutree(wisc.hclust, k=4, diagnosis)
table(cutree(wisc.hclust, k=4), diagnosis)
table(wisc.km$cluster, diagnosis)
table(cutree(wisc.hclust, k=2), diagnosis)
table(cutree(wisc.hclust, k=4), diagnosis)
#hclust
#sensitivity
165/212
#Specificity
343/357
#k-means
#Sensitivity
130/212
#Specificity
356/357
plot(wisc.pr$x[,1:2], col=g)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
#url <- "new_samples.csv"
url <- "https://tinyurl.com/new-samples-CSV"
new <- read.csv(url)
npc <- predict(wisc.pr, newdata=new)
npc
plot(wisc.pr$x[,1:2], col=g)
points(npc[,1], npc[,2], col="blue", pch=16, cex=3)
text(npc[,1], npc[,2], c(1,2), col="white")
#Saving the input data file into my Project Directory
fna.data <-  "WisconsinCancer.csv"
#Input the data and store it under wisc.df
wisc.df <- read.csv(fna.data, row.names=1)
#Inspect data
View(wisc.df)
head(wisc.df)
grep("_mean", names(wisc.data))
fna.data <-  "WisconsinCancer.csv"
wisc.df <- read.csv(fna.data, row.names=1)
View(wisc.df)
head(wisc.df)
#Create new data frame that omits diagnosis column
wisc.data <- wisc.df[,-1]
#Create vector w/ diagnoses
diagnosis <- factor(wisc.df$diagnosis)
diagnosis
str(wisc.data)
table(diagnosis)
grep("_mean", names(wisc.data))
grep("_mean", wisc.data)
grep("_mean", names(wisc.data))
length(grep("_mean", names(wisc.data)))
#Check column means
colMeans(wisc.data)
apply(wisc.data, 2, sd)
fna.data <-  "WisconsinCancer.csv"
wisc.df <- read.csv(fna.data, row.names=1)
View(wisc.df)
head(wisc.df)
#Create new data frame that omits diagnosis column
wisc.data <- wisc.df[,-1]
#Create vector w/ diagnoses
diagnosis <- factor(wisc.df$diagnosis)
diagnosis
str(wisc.data)
table(diagnosis)
#names() allows us to get the names of the objects in wisc.data
length(grep("_mean", names(wisc.data)))
#Check column means
colMeans(wisc.data)
#applt the sd function to the columns of wisc.data
#MARGIN arg: 1 = rows, 2 = cols, c(1,2) = rows & cols
apply(wisc.data, 2, sd)
#Perform PCA with prcomp() fn
wisc.pr <- prcomp(wisc.data, scale=TRUE)
#PCA results
summary(wisc.pr)
#Scree plot
plot(wisc.pr, main= "Quick scree plot")
#Biplot
biplot(wisc.pr)
#Scatterplot w/ PC1 & PC2, points colored by dx
plot(wisc.pr$x[,1], wisc.pr$x[,2], col = diagnosis, xlab = "PC1", ylab = "PC2")
# Repeat for components 1 and 3
plot(wisc.pr$x[,1], wisc.pr$x[,3], col = diagnosis,
xlab = "PC1", ylab = "PC3")
library(ggplot2)
df <- as.data.frame(wisc.pr$x)
df$diagnosis <- diagnosis
#Scatter plot colored by dx
ggplot(df) + aes(PC1, PC2, col=diagnosis) + geom_point()
#The variance of e/ component
pr.var <-  wisc.pr$sdev^2
head(pr.var)
#Variance explained by e/ PC
pve <-  pr.var/sum(pr.var)
# Plot variance explained by each principal component
plot(pve, xlab = "Principal Component",
ylab = "Proportion of Variance Explained",
ylim = c(0, 1), type = "o")
# Alternative scree plot of the same data, note data driven y-axis
barplot(pve, ylab = "Precent of Variance Explained",
names.arg=paste0("PC",1:length(pve)), las=2, axes = FALSE)
axis(2, at=pve, labels=round(pve,2)*100 )
wisc.pr$rotation[,1]
#Scree plot
library(ade4)
dudipca <- dudi.pca(df = wisc.data, center = TRUE, scale = TRUE, scannf = FALSE, nf = 30)
dudipca
